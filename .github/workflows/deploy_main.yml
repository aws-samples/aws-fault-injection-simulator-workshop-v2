on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:    # allows manual trigger

env:
  AWS_REGION: "us-east-1"
  EE_TEAM_ROLE_ARN: "arn:aws:iam::992382547812:role/GithubActionRole"
  
permissions:
  id-token: write   # This is required for requesting the JWT
  contents: read    # This is required for actions/checkout

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  deploy:
    runs-on: ubuntu-latest
    outputs:
      deployment_status: ${{ job.status }}
    steps: 
      - name: Git clone the repository
        uses: actions/checkout@v4

      - name: Debug directory structure
        run: |
          pwd
          ls -R

      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::992382547812:role/GithubActionRole
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          role-duration-seconds: 14400
          aws-region: us-east-1

      - name: Sts GetCallerIdentity
        run: |
          aws sts get-caller-identity

      - name: Delete UserSimulationStack Log Groups
        run: |
          echo "Searching for log groups containing 'UserSimulationStack'"
          # Get the log groups containing UserSimulationStack
          LOG_GROUPS=$(aws logs describe-log-groups \
            --query "logGroups[?contains(logGroupName, 'UserSimulationStack')].logGroupName" \
            --output text)

          # Check if any log groups were found
          if [ -z "$LOG_GROUPS" ] || [ "$LOG_GROUPS" = "None" ]; then
              echo "No log groups found containing 'UserSimulationStack'. Skipping deletion."
              exit 0
          fi

          # Process each log group
          echo "$LOG_GROUPS" | tr '\t' '\n' | while read -r log_group; do
              if [ ! -z "$log_group" ]; then
                  echo "Deleting log group: $log_group"
                  if aws logs delete-log-group --log-group-name "$log_group"; then
                      echo "Successfully deleted: $log_group"
                  else
                      echo "Failed to delete: $log_group"
                  fi
              fi
          done
          echo "Finished processing log groups" 
        shell: bash 

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '23.x'  # adjust version as needed

      - name: Cache Node.js dependencies
        id: cache
        uses: actions/cache@v4
        with:
          path: ./node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('./package-lock.json') }}

      - name: Install global dependencies
        run: |
          npm install aws-cdk -g
          aws cloudformation list-stacks --query 'StackSummaries[?(StackName==`CDKToolkit` && StackStatus==`CREATE_COMPLETE`)].StackId' --output text
        if: steps.cache.outputs.cache-hit != 'true'

      - name: Deploy VSCode Server Stack
        working-directory: ./aws-fault-injection-simulator-workshop-v2/supporting-services/vscode-server
        run: |
          npm install
          npm run build
          cdk deploy VscodeServerStack --context is_event_engine="false" --require-approval never
          
      - name: Deploy Pet Stack Services
        working-directory: ./PetAdoptions/cdk/pet_stack
        run: |
          npm install
          npm run build
          cdk deploy Services --context admin_role=$EE_TEAM_ROLE_ARN --context is_event_engine="false" --require-approval=never 
          cdk deploy ServicesSecondary --context admin_role=$EE_TEAM_ROLE_ARN --context is_event_engine="false" --require-approval=never 

      - name: Deploy Network Stacks
        working-directory: ./PetAdoptions/cdk/pet_stack
        run: |
          cdk deploy NetworkRegionPeering --require-approval=never
          cdk deploy NetworkRoutesMain --require-approval=never
          cdk deploy NetworkRoutesSecondary --require-approval=never

      - name: Deploy Application Stacks
        working-directory: ./PetAdoptions/cdk/pet_stack
        run: |
          cdk deploy S3Replica --require-approval=never
          cdk deploy Applications --require-approval=never
          cdk deploy ApplicationsSecondary --require-approval=never
          cdk deploy FisServerless --require-approval=never

      - name: Deploy Observability Stacks
        working-directory: ./PetAdoptions/cdk/pet_stack
        run: |
          cdk deploy Observability --require-approval=never
          cdk deploy ObservabilitySecondary --require-approval=never
          cdk deploy ObservabilityDashboard --require-approval=never

      - name: Deploy User Simulation Stacks
        working-directory: ./PetAdoptions/cdk/pet_stack
        run: |
          cdk deploy UserSimulationStack --require-approval=never
          sh ../../../az-experiment/scripts/removeusersimtags.sh
          cdk deploy UserSimulationStackSecondary --require-approval=never

      - name: Deploy Intro Experiment
        working-directory: ./intro-experiment/cdk
        run: |
          npm install
          cdk deploy --require-approval=never
          
  verify:
    needs: deploy
    runs-on: ubuntu-latest
    if: needs.deploy.result == 'success'
    outputs:
      verification_status: ${{ job.status }}
    steps:
      - name: Git clone the repository
        uses: actions/checkout@v4

      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.EE_TEAM_ROLE_ARN }}
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          role-duration-seconds: 14400
          aws-region: ${{ env.AWS_REGION }}

      - name: Wait for 10 minutes
        run: |
          echo "Waiting for 10 minutes so we can check the user simulation output"
          sleep 600

      - name: Check PetSite Navigation Status
        id: check-navigation
        run: |
          # Find the log group
          LOG_GROUP=$(aws logs describe-log-groups \
              --query "logGroups[?contains(logGroupName, 'UserSimulationStack-getAllPets')].logGroupName" \
              --output text)
  
          if [ -z "$LOG_GROUP" ]; then
              echo "No log group found containing 'UserSimulationStack-getAllPets'"
              exit 1
          fi
  
          echo "Found log group: $LOG_GROUP"
  
          # Get the most recent log stream
          LATEST_STREAM=$(aws logs describe-log-streams \
              --log-group-name "$LOG_GROUP" \
              --order-by LastEventTime \
              --descending \
              --limit 1 \
              --query 'logStreams[0].logStreamName' \
              --output text)

          if [ -z "$LATEST_STREAM" ]; then
              echo "No log streams found in the log group"
              exit 1
          fi

          echo "Checking latest stream: $LATEST_STREAM"

          # Search for navigation success messages
          NAVIGATION_SUCCESS=$(aws logs get-log-events \
              --log-group-name "$LOG_GROUP" \
              --log-stream-name "$LATEST_STREAM" \
              --query "events[?starts_with(message, 'Navigation successful:')].message" \
              --output text)
  
          if [ -n "$NAVIGATION_SUCCESS" ]; then
              echo "Navigation Status: SUCCESS"
              echo "Found message: $NAVIGATION_SUCCESS"
              echo "navigation_status=success" >> $GITHUB_ENV
          else
              echo "Navigation Status: FAILED"
              echo "navigation_status=failed" >> $GITHUB_ENV
              exit 1
          fi

  destroy:
    needs: [deploy, verify]
    runs-on: ubuntu-latest
    if: |
      always() && (
        needs.deploy.result == 'failure' ||
        needs.verify.result == 'failure' ||
        (needs.deploy.result == 'success' && needs.verify.result == 'success')
      )
    steps:
      - name: Git clone the repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.EE_TEAM_ROLE_ARN }}
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          role-duration-seconds: 14400
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '23.x'

      - name: Install global dependencies
        run: npm install aws-cdk -g

      - name: Destroy VSCode Server Stack
        working-directory: ./aws-fault-injection-simulator-workshop-v2/supporting-services/vscode-server
        run: |
          npm install
          cdk destroy --force --all --require-approval never

      - name: Destroy Intro Experiment FisStackAsg
        working-directory: ./intro-experiment/cdk
        run: |
          npm install
          cdk destroy --force --all --require-approval never

      - name: Destroy Workshop
        working-directory: ./PetAdoptions/cdk/pet_stack
        run: |
          npm install
          cdk destroy --force --all --require-approval never
